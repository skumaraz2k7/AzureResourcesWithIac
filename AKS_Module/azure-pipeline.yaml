pool:
  vmImage: 'ubuntu-latest'

variables:
  servicePrinciple: 'az-devops-spi'

parameters:
  - name: destroy
    type: boolean
    default: false

steps:
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'az-devops-spi'
      KeyVaultName: 'skakskv01'
      SecretsFilter: '*'
      RunAsPreJob: true

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        az login --service-principal --tenant $(azureTenantId) --username $(az-devops-spi-id) --password $(az-devops-spi)
        az account set --subscription $(subscriptionId)
    displayName: 'Azure Login'

  - task: TerraformInstaller@0
    inputs:
      terraformVersion: '1.5.0'

  - task: TerraformTaskV2@2
    displayName: 'Terraform Init'
    inputs:
      provider: $(tfProvider)
      command: 'init'      
      workingDirectory: $(workingDirectory)
      backendServiceArm: $(servicePrinciple)
      backendAzureRmResourceGroupName: $(tfResourceGroup)
      backendAzureRmStorageAccountName: $(storageAccoount)
      backendAzureRmContainerName: $(containerName)
      backendAzureRmKey: $(tfStateFile)

  - task: TerraformTaskV2@2
    displayName: Terraform Plan
    enabled: true
    inputs: 
      provider: $(tfProvider)
      command: 'plan'
      commandOptions: '--var-file=terraform.tfvars --out plan.out'
      workingDirectory: $(workingDirectory)
      environmentServiceNameAzureRM: $(servicePrinciple)  

  - task: TerraformTaskV2@2
    displayName: Terraform Apply
    enabled: true
    inputs: 
      provider: $(tfProvider)
      command: 'apply'
      commandOptions: '--var-file=terraform.tfvars'            
      workingDirectory: $(workingDirectory)
      environmentServiceNameAzureRM: $(servicePrinciple)           
          
  - task: TerraformTaskV2@2
    displayName: Terraform Destroy
    enabled: $(destroy) 
    inputs: 
      provider: $(tfProvider)
      command: 'destroy'              
      workingDirectory: $(workingDirectory)
      environmentServiceNameAzureRM: $(servicePrinciple) 
